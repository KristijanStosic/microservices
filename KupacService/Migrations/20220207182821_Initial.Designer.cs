// <auto-generated />
using System;
using KupacService.Entities.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KupacService.Migrations
{
    [DbContext(typeof(KupacContext))]
    [Migration("20220207182821_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KupacPrioritet", b =>
                {
                    b.Property<Guid>("KupacId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrioritetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KupacId", "PrioritetId");

                    b.HasIndex("PrioritetId");

                    b.ToTable("KupacPrioritet");

                    b.HasData(
                        new
                        {
                            KupacId = new Guid("febd1c29-90e7-40c2-97f3-1e88495fe98d"),
                            PrioritetId = new Guid("2578e81b-3f01-479a-b790-f52106f639f7")
                        });
                });

            modelBuilder.Entity("KupacService.Entities.KontaktOsoba", b =>
                {
                    b.Property<Guid>("KontaktOsobaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Funkcija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KontaktOsobaId");

                    b.ToTable("KontaktOsobe");

                    b.HasData(
                        new
                        {
                            KontaktOsobaId = new Guid("244fb7c4-aab8-4ec4-8960-e48e017bad37"),
                            Funkcija = "Funkcija1",
                            Ime = "Milan",
                            Prezime = "Drazic",
                            Telefon = "0693432534"
                        },
                        new
                        {
                            KontaktOsobaId = new Guid("da2197a4-891f-4a40-a1f2-313962701627"),
                            Funkcija = "Funkcija2",
                            Ime = "Mark",
                            Prezime = "Todor",
                            Telefon = "0693432534"
                        });
                });

            modelBuilder.Entity("KupacService.Entities.Kupac", b =>
                {
                    b.Property<Guid>("KupacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdresaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrojRacuna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojTelefona2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumPocetkaZabrane")
                        .HasColumnType("datetime2");

                    b.Property<int>("DuzinaTrajanjaZabraneGod")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImaZabranu")
                        .HasColumnType("bit");

                    b.Property<double>("OstvarenaPovrsina")
                        .HasColumnType("float");

                    b.HasKey("KupacId");

                    b.ToTable("Kupci");
                });

            modelBuilder.Entity("KupacService.Entities.ManyToMany.KupacOvlascenoLice", b =>
                {
                    b.Property<Guid>("KupacId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OvlascenoLiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KupacId", "OvlascenoLiceId");

                    b.ToTable("kupacOvlascenoLice");

                    b.HasData(
                        new
                        {
                            KupacId = new Guid("febd1c29-90e7-40c2-97f3-1e88495fe98d"),
                            OvlascenoLiceId = new Guid("5ed44cab-255d-4bb7-9cc9-828ec90bfaf5")
                        },
                        new
                        {
                            KupacId = new Guid("4ba95c01-aa89-4d36-a467-c72b0fcc5b80"),
                            OvlascenoLiceId = new Guid("5ed44cab-255d-4bb7-9cc9-828ec90bfaf5")
                        },
                        new
                        {
                            KupacId = new Guid("4ba95c01-aa89-4d36-a467-c72b0fcc5b80"),
                            OvlascenoLiceId = new Guid("5e1bfffc-1aee-4662-bc04-341c35b9ebdc")
                        });
                });

            modelBuilder.Entity("KupacService.Entities.ManyToMany.KupacUplata", b =>
                {
                    b.Property<Guid>("UplataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KupacId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UplataId");

                    b.HasIndex("KupacId");

                    b.ToTable("kupacUplata");

                    b.HasData(
                        new
                        {
                            UplataId = new Guid("5ed44cab-255d-4bb7-9cc9-828ec90bfaf5"),
                            KupacId = new Guid("febd1c29-90e7-40c2-97f3-1e88495fe98d")
                        },
                        new
                        {
                            UplataId = new Guid("5e1bfffc-1aee-4662-bc04-341c35b9ebdc"),
                            KupacId = new Guid("4ba95c01-aa89-4d36-a467-c72b0fcc5b80")
                        });
                });

            modelBuilder.Entity("KupacService.Entities.Prioritet", b =>
                {
                    b.Property<Guid>("PrioritetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrioritetId");

                    b.ToTable("Prioriteti");

                    b.HasData(
                        new
                        {
                            PrioritetId = new Guid("2578e81b-3f01-479a-b790-f52106f639f7"),
                            Opis = "Vlasnik sistema za navodnjavanje"
                        },
                        new
                        {
                            PrioritetId = new Guid("f2b8faa4-732c-4480-8b0a-34d65e483930"),
                            Opis = "Vlasnik zemljišta koje se graniči sazemljištem koje se daje u zakup"
                        });
                });

            modelBuilder.Entity("KupacService.Entities.FizickoLice", b =>
                {
                    b.HasBaseType("KupacService.Entities.Kupac");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FizickoLice");

                    b.HasData(
                        new
                        {
                            KupacId = new Guid("febd1c29-90e7-40c2-97f3-1e88495fe98d"),
                            AdresaId = new Guid("1c989ee3-13b2-4d3b-abeb-c4e6343eace7"),
                            BrojRacuna = "908 ‑ 10501 ‑ 97",
                            BrojTelefona = "069453432543",
                            DatumPocetkaZabrane = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DuzinaTrajanjaZabraneGod = 0,
                            Email = "filip@gmail.com",
                            ImaZabranu = false,
                            OstvarenaPovrsina = 500.0,
                            Ime = "Filip",
                            JMBG = "1253627363526",
                            Prezime = "Ivanic"
                        });
                });

            modelBuilder.Entity("KupacService.Entities.PravnoLice", b =>
                {
                    b.HasBaseType("KupacService.Entities.Kupac");

                    b.Property<string>("Faks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KontaktOsobaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaticniBroj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("KontaktOsobaId");

                    b.ToTable("PravnoLice");

                    b.HasData(
                        new
                        {
                            KupacId = new Guid("4ba95c01-aa89-4d36-a467-c72b0fcc5b80"),
                            BrojRacuna = "934 ‑ 10501 ‑ 97",
                            BrojTelefona = "069453232543",
                            DatumPocetkaZabrane = new DateTime(2022, 2, 7, 19, 28, 20, 899, DateTimeKind.Local).AddTicks(996),
                            DuzinaTrajanjaZabraneGod = 2,
                            Email = "Firma@gmail.com",
                            ImaZabranu = true,
                            OstvarenaPovrsina = 200.0,
                            Faks = "+1-212-9876543",
                            KontaktOsobaId = new Guid("da2197a4-891f-4a40-a1f2-313962701627"),
                            MaticniBroj = "1254327363526",
                            Naziv = "Firma"
                        });
                });

            modelBuilder.Entity("KupacPrioritet", b =>
                {
                    b.HasOne("KupacService.Entities.Kupac", null)
                        .WithMany()
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KupacService.Entities.Prioritet", null)
                        .WithMany()
                        .HasForeignKey("PrioritetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KupacService.Entities.ManyToMany.KupacOvlascenoLice", b =>
                {
                    b.HasOne("KupacService.Entities.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");
                });

            modelBuilder.Entity("KupacService.Entities.ManyToMany.KupacUplata", b =>
                {
                    b.HasOne("KupacService.Entities.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");
                });

            modelBuilder.Entity("KupacService.Entities.FizickoLice", b =>
                {
                    b.HasOne("KupacService.Entities.Kupac", null)
                        .WithOne()
                        .HasForeignKey("KupacService.Entities.FizickoLice", "KupacId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KupacService.Entities.PravnoLice", b =>
                {
                    b.HasOne("KupacService.Entities.KontaktOsoba", "KontaktOsoba")
                        .WithMany()
                        .HasForeignKey("KontaktOsobaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KupacService.Entities.Kupac", null)
                        .WithOne()
                        .HasForeignKey("KupacService.Entities.PravnoLice", "KupacId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("KontaktOsoba");
                });
#pragma warning restore 612, 618
        }
    }
}
